<?php

namespace Fiscalite\GestionFiscaliteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleTFRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleTFRepository extends EntityRepository {

    public function search($dataAnneetaxation, $dataTitreEtDesignation, $dataSommeAPayermin, $dataSommeAPayermax) {
        $qb = $this->createQueryBuilder('a');
        if ($dataAnneetaxation != NULL) {
            $qb->join('a.fichier', 'f1');
            $qb->andWhere('f1.anneetaxation =:ann')
                    ->setParameter('ann', $dataAnneetaxation->getAnneetaxation());
        }
        if ($dataTitreEtDesignation != NULL) {
            $qb->andWhere('a.titreEtDesignation LIKE :nom')
                    ->setParameter('nom', '%' . $dataTitreEtDesignation . '%');
        }
        if ($dataSommeAPayermin != NULL) {
            $qb->andWhere('a.sommeAPayer >= :sommeAPayer1')
                    ->setParameter('sommeAPayer1', $dataSommeAPayermin);
        }
        if ($dataSommeAPayermax != NULL) {
            $qb->andWhere('a.sommeAPayer <= :sommeAPayer2')
                    ->setParameter('sommeAPayer2', $dataSommeAPayermax);
        }
        $qb->orderBy('a.titreEtDesignation', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findAllOrderbytitreEtDesignation() {
        $qb = $this->createQueryBuilder('a')
                ->orderby('a.titreEtDesignation', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findAllOrderbytitreEtDesignationlimit() {
        $qb = $this->createQueryBuilder('a')
                ->orderby('a.titreEtDesignation', 'ASC')
                ->setMaxResults(50);
        return $qb->getQuery()->getResult();
    }

    public function rechercherArticleAnneePrecedente($articleTF) {
        $qb = $this->createQueryBuilder('a');
        if ($articleTF != NULL) {
            $qb->join('a.fichier', 'f')
                    ->andWhere('f.anneetaxation =:year ')
                    ->setParameter('year', $articleTF->getFichier()->getAnneetaxation() - 1);
            $qb->andWhere('a.titreEtDesignation =:titreEtDesignation')
                    ->setParameter('titreEtDesignation', $articleTF->getTitreEtDesignation());
            $qb->andWhere('a.suiteDesignation =:suiteDesignation')
                    ->setParameter('suiteDesignation', $articleTF->getSuiteDesignation());
            $qb->andWhere('a.ligneVoie LIKE :ligneVoie')
                    ->setParameter('ligneVoie', '%' . $articleTF->getLigneVoie() . '%');
        } else {
            $qb = null;
        }

        return $qb->getQuery()->getResult();
    }

    function couperChaine($chaine, $nbrMotMax) {

        $chaineNouvelle = "";
        $t_chaineNouvelle = explode(" ", $chaine);
        foreach ($t_chaineNouvelle as $cle => $mot) {
            if ($cle < $nbrMotMax) {
                $chaineNouvelle .= $mot . " ";
            }
        }//penser Ã  enlever le tiret pour chaque mot
        return $chaineNouvelle;
    }

    public function searchArticleTF($articleTH) {
        $chaineCouper = $this->couperChaine(substr($articleTH->getNomprenom(), 9), 2);
        $qb = $this->createQueryBuilder('a')
                ->join('a.fichier', 'f')
                ->andWhere('f.anneetaxation =:year ')
                ->setParameter('year', $articleTH->getFichier()->getAnneetaxation())
                ->andWhere('a.codeArticle =:codeArticle ')
                ->setParameter('codeArticle', $articleTH->getCodeArticle())
                ->andWhere('a.titreEtDesignation LIKE :nom OR a.suiteDesignation LIKE :nom')
                ->setParameter('nom', '%' . $chaineCouper . '%');
        return $qb->getQuery()->getResult();
    }

    public function listeTitreEtDesignation($term) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.titreEtDesignation')
                ->where('c.titreEtDesignation LIKE :term1')
                ->setParameter('term1', '%' . $term . '%');
        $arrayAss = $qb->getQuery()
                ->getArrayResult();
        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = $data['titreEtDesignation'];
        }
        return $array;
    }

    public function searchListTFSimulation($nom) {
        $qb = $this->createQueryBuilder('a');
        if ($nom != NULL) {
            $qb->andWhere('a.titreEtDesignation LIKE :nom')
                    ->setParameter('nom', '%' . $nom . '%');
        }
        if (($nom == NULL) || $qb->getQuery()->getResult() == NULL) {
            $qb = $this->createQueryBuilder('n');
            return $qb->getQuery()->getResult();
        }
        return $qb->getQuery()->getResult();
    }

    public function rechercherListeArticleTF($fichier) {
        $qb = $this->createQueryBuilder('a')->join('a.fichier', 'f')
                        ->andWhere('f.nom LIKE :file')->setParameter('file', $fichier->getNom());
        return $qb->getQuery()->getResult();
    }

    public function getArticleStop($relatedfichier) {
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.fichier', 'f')
                ->andWhere('f.nom LIKE :nom ')
                ->setParameter('nom', '%' . $relatedfichier . '%')
                ->addOrderBy('a.numerosequentiel', 'DESC')
                ->setMaxResults(1);
        return $qb->getQuery()->getResult();
    }

}
