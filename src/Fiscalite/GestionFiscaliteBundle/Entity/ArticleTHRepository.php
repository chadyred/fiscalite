<?php

namespace Fiscalite\GestionFiscaliteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleTHRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleTHRepository extends EntityRepository {

    public function search($datanumerosequentiel, $datanomprenom, $dataadresse, $dataanneetaxation) {
        $qb = $this->createQueryBuilder('a');
        if ($datanumerosequentiel != NULL) {
            $qb->andWhere('a.numerosequentiel =:numerosequentiel')
                    ->setParameter('numerosequentiel', $datanumerosequentiel);
        }
        if ($datanomprenom != NULL) {
            $qb->andWhere('a.nomprenom LIKE :nomprenom OR a.suitenom LIKE :nomprenom')
                    ->setParameter('nomprenom', '%' . $datanomprenom . '%');
        }
        if ($dataadresse != NULL) {
            $qb->andWhere('a.codevoie LIKE :adresse OR a.numeroimmeubleaft LIKE :adresse OR 
                a.indicederepetition LIKE :adresse OR a.libellevoieaft LIKE :adresse')
                    ->setParameter('adresse', '%' . $dataadresse->getLibellevoieaft() . '%');
        }if ($dataanneetaxation != NULL) {
            $qb->join('a.fichier', 'f1');
            $qb->andWhere('f1.anneetaxation =:ann')
                    ->setParameter('ann', $dataanneetaxation->getAnneetaxation());
        }
        $qb->orderBy('a.nomprenom', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function searchListTH($dataAnneetaxation, $dataNompersonne, $dataNbpersonnesacharge
                        ,$dataBasenettemin, $dataBasenettemax,$dataAbattementgeneralbasecommunale,
            $dataAbattementpersonneschargecommunal,$dataAbattementspecialbasecommunal,
            $dataAbattementspecialhandicapecommunal,$dataCotisationcommunalemin, $dataCotisationcommunalemax,
            $dataMontantnetapayermin, $dataMontantnetapayermax) {
        $qb = $this->createQueryBuilder('a');
        if ($dataAnneetaxation != NULL) {
            foreach ($dataAnneetaxation as $annee){
            $qb->join('a.fichier', 'f1');
            $qb->andWhere('f1.anneetaxation =:ann')
                    ->setParameter('ann', $annee->getAnneetaxation());
            }
        }
        if ($dataNompersonne != NULL) {
            $qb->andWhere('a.nomprenom LIKE :nom OR a.suitenom LIKE :nom')
                    ->setParameter('nom', '%' . $dataNompersonne . '%');
        }
        if ($dataNbpersonnesacharge != NULL) {
            $qb->join('a.cotisation', 'c3');
            $qb->andWhere('c3.nbpersonnesacharge = :nbpersonnesacharge')
                    ->setParameter('nbpersonnesacharge', $dataNbpersonnesacharge);
        }
        if ($dataBasenettemin != NULL) {
            $qb->join('a.base', 'b1');
            $qb->andWhere('b1.basenettecommunale >= :basenette1')
                    ->setParameter('basenette1', $dataBasenettemin);
        }
        if ($dataBasenettemax != NULL) {
            $qb->join('a.base', 'b2');
            $qb->andWhere('b2.basenettecommunale <= :basenette2')
                    ->setParameter('basenette2', $dataBasenettemax);
        }
        if ($dataAbattementgeneralbasecommunale != NULL) {
            $qb->join('a.abattement', 'a1');
            $qb->andWhere('a1.abattementgeneralbasecommunale = :abattementgeneralbasecommunale')
                    ->setParameter('abattementgeneralbasecommunale', $dataAbattementgeneralbasecommunale);
        }
        if ($dataAbattementpersonneschargecommunal != NULL) {
            $qb->join('a.abattement', 'a2');
            $qb->andWhere('a2.abattementpersonneschargecommunnal = :abattementpersonneschargecommunnal')
                    ->setParameter('abattementpersonneschargecommunnal', $dataAbattementpersonneschargecommunal);
        }
        if ($dataAbattementspecialbasecommunal != NULL) {
            $qb->join('a.abattement', 'a3');
            $qb->andWhere('a3.abattementspecialbasecommunal = :abattementspecialbasecommunal')
                    ->setParameter('abattementspecialbasecommunal', $dataAbattementspecialbasecommunal);
        }
        if ($dataAbattementspecialhandicapecommunal != NULL) {
            $qb->join('a.abattement', 'a4');
            $qb->andWhere('a4.abattementspecialhandicapecommunal = :abattementspecialhandicapecommunal')
                    ->setParameter('abattementspecialhandicapecommunal', $dataAbattementspecialhandicapecommunal);
        }
        if ($dataMontantnetapayermin != NULL) {
            $qb->andWhere('a.montantnetapayer >= :montantnetapayer1')
                    ->setParameter('montantnetapayer1', $dataMontantnetapayermin);
        }
        if ($dataMontantnetapayermax != NULL) {
            $qb->andWhere('a.montantnetapayer <= :montantnetapayer2')
                    ->setParameter('montantnetapayer2', $dataMontantnetapayermax);
        }
        if ($dataCotisationcommunalemin != NULL) {
            $qb->join('a.cotisation', 'c1')
                    ->andWhere('c1.cotisationcommunale >= :cotisationcommunale1')
                    ->setParameter('cotisationcommunale1', $dataCotisationcommunalemin);
        }
        if ($dataCotisationcommunalemax != NULL) {
            $qb->join('a.cotisation', 'c2')
                    ->andWhere('c2.cotisationcommunale <= :cotisationcommunale2')
                    ->setParameter('cotisationcommunale2', $dataCotisationcommunalemax);
        }
        $qb->orderBy('a.nomprenom', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findAllOrderbynomprenom() {
        $qb = $this->createQueryBuilder('a');
        $qb->orderby('a.nomprenom', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function searchAutreArticle($nomprenom, $suitenom, $libelleaft) {
        $qb = $this->createQueryBuilder('a');
        $year = date("Y") - 2;
        $qb->join('a.fichier', 'f')
                ->andWhere('f.anneetaxation =:year ')
                ->setParameter('year', $year);

        if ($nomprenom != NULL) {
            $qb->andWhere('a.nomprenom =:nomprenom')
                    ->setParameter('nomprenom', $nomprenom);
        }
        if ($suitenom != NULL) {
            $qb->andWhere('a.suitenom =:suitenom')
                    ->setParameter('suitenom', $suitenom);
        }
        if ($libelleaft != NULL) {
            $qb->join('a.adresse', 'adr')
                    ->andWhere('adr.libellevoieaft LIKE :adresse')
                    ->setParameter('adresse', '%' . $libelleaft . '%');
        }
        if ($nomprenom == NULL && $suitenom == NULL && $libelleaft == NULL) {
            $qb = null;
            return $qb;
        }

        return $qb->getQuery()->getResult();
    }

    function couperChaine($chaine, $nbrMotMax) {
        $chaineNouvelle = "";
        $t_chaineNouvelle = explode(" ", $chaine);
        foreach ($t_chaineNouvelle as $cle => $mot) {
            if ($cle < $nbrMotMax) {
                $chaineNouvelle .= $mot . " ";
            }
        }
        return $chaineNouvelle;
    }

    public function searchArticleTH($articletaxationbatis, $articleTF) {
        //prend la chaine sans MR OU MME
        $chaineCouper = $this->couperChaine(substr($articleTF->getTitreEtDesignation(), 4), 2);
        $qb = $this->createQueryBuilder('a')
                ->join('a.fichier', 'f')
                ->andWhere('f.anneetaxation =:year ')
                ->setParameter('year', $articleTF->getFichier()->getAnneetaxation())
                ->join('a.adresse', 'adr')
                ->andWhere('adr.codevoie =:codeVoie ')
                ->setParameter('codeVoie', $articletaxationbatis->getCodeVoie())
                ->andWhere('adr.numeroimmeubleaft =:numeroImmeuble ')
                ->setParameter('numeroImmeuble', $articletaxationbatis->getNumeroImmeuble())
                ->andWhere('adr.indicederepetition =:btq ')
                ->setParameter('btq', $articletaxationbatis->getBtq())
                ->andWhere('a.nomprenom LIKE :nom')
                ->setParameter('nom', '%' . $chaineCouper . '%');
        //TABLEAU DANS $articleTH
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function searchListTHSimulation($nom, $prenom) {
        $qb = $this->createQueryBuilder('a');
        if ($nom != NULL) {
            $qb->andWhere('a.nomprenom LIKE :nom')
                    ->setParameter('nom', '%' . $nom . '%');
        }
        if ($nom != NULL) {
            $qb->andWhere('a.nomprenom LIKE :prenom')
                    ->setParameter('prenom', '%' . $prenom . '%');
        }
        if (($nom == NULL && $prenom == NULL) || $qb->getQuery()->getResult() == NULL) {
            $qb = $this->createQueryBuilder('n');
            return $qb->getQuery()->getResult();
        }
        return $qb->getQuery()->getResult();
    }
    
    public function listeNompersonne($term) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.nomprenom')
                ->where('c.nomprenom LIKE :term1')
                ->setParameter('term1', '%' . $term . '%');
        $arrayAss = $qb->getQuery()
                ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = $data['nomprenom'];
        }

        return $array;
    }
    
    public function getArticleStop($relatedfichier) {
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.fichier', 'f')
                ->andWhere('f.nom LIKE :nom ')
                ->setParameter('nom', '%' .$relatedfichier.'%')
                ->addOrderBy('a.numerosequentiel', 'DESC')
                ->setMaxResults(1);
        return $qb->getQuery()->getResult();
    }
}
